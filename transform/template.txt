// GENERATED CODE; DO NOT EDIT!

package transform{{$Rotations := .Rotations}}

import (
	"image"
)

// Rotator implements simple 90-degree rotations in addition to mirroring for
// IIIF compliance.  After each operation, the underlying image is replaced
// with the new image.  It's important to note, however, that the source image
// is never directly changed.  A new image is drawn, and the old is simply
// forgotten by the Rotator.
type Rotator interface {
	Image() image.Image
{{range $Rotations}}	{{.Method}}()
{{end}}}

{{range .Types}}
{{$Type := .}}

// {{.Shortstring}}Rotator decorates {{.String}} with rotation functions
type {{.Shortstring}}Rotator struct {
	Img {{.String}}
}

// Image returns the underlying image as an image.Image value
func (r *{{$Type.Shortstring}}Rotator) Image() image.Image {
	return r.Img
}

{{range $Rotations}}
// {{.Method}} {{.Comment}}
func (r *{{$Type.Shortstring}}Rotator) {{.Method}}() {
	src := r.Img
	srcB := src.Bounds()
	srcWidth := srcB.Dx()
	srcHeight := srcB.Dy()

	dst := {{$Type.ConstructorMethod}}(image.Rect(0, 0, {{.DimensionOrder}}))

	var x, y, srcIdx, dstIdx int64
	maxX, maxY := int64(srcWidth), int64(srcHeight)
	srcStride, dstStride := int64(src.Stride), int64(dst.Stride)
	srcPix := src.Pix
	dstPix := dst.Pix
	for y = 0; y < maxY; y++ {
		for x = 0; x < maxX; x++ {
			srcIdx = y*srcStride + {{.GetSrcX $Type.ByteSize}}
			dstIdx = {{.GetDstY}}*dstStride + {{.GetDstX $Type.ByteSize}}
			{{$Type.CopyStatement}}
		}
	}

	r.Img = dst
}
{{end}}
{{end}}
// GENERATED CODE; DO NOT EDIT!
