// GENERATED CODE; DO NOT EDIT!

package transform{{$Rotations := .Rotations}}

import (
	"image"
)

type Rotator interface {
{{range $Rotations}}	{{.Method}}() image.Image
{{end}}}

{{range .Types}}
{{$Type := .}}

// {{.Shortstring}}Rotator decorates {{.String}} with rotation functions
type {{.Shortstring}}Rotator struct {
	{{.String}}
}

{{range $Rotations}}
// {{.Method}} {{.Comment}}
func (src {{$Type.Shortstring}}Rotator) {{.Method}}() image.Image {
	srcB := src.Bounds()
	srcWidth := srcB.Dx()
	srcHeight := srcB.Dy()

	dst := {{$Type.ConstructorMethod}}(image.Rect(0, 0, {{.DimensionOrder}}))

	var x, y, srcPix, dstPix int64
	maxX, maxY := int64(srcWidth), int64(srcHeight)
	srcStride, dstStride := int64(src.Stride), int64(dst.Stride)
	for y = 0; y < maxY; y++ {
		for x = 0; x < maxX; x++ {
			srcPix = y*srcStride + {{.GetSrcX $Type.ByteSize}}
			dstPix = {{.GetDstY}}*dstStride + {{.GetDstX $Type.ByteSize}}
			{{$Type.CopyStatement}}
		}
	}

	return dst
}
{{end}}
{{end}}
// GENERATED CODE; DO NOT EDIT!
